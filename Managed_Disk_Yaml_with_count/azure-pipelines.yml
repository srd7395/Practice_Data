# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- main

pool:
  name: Default
stages:
- stage: Build
  jobs:
    - job: Build_Job
      steps:
      - task: CopyFiles@2
        displayName: Copy files
        inputs:
          Contents: '**'
          TargetFolder: '$(Build.ArtifactStagingDirectory)'
      - task: PublishBuildArtifacts@1
        displayName: Publish Artifacts
        inputs:
          PathtoPublish: '$(Build.ArtifactStagingDirectory)'
          ArtifactName: 'drop'
          publishLocation: 'Container'
- stage: Deploy
  jobs:
    - job: Deploy_Job
      steps:
      - task: DownloadBuildArtifacts@1
        displayName: Download Artifacts
        inputs:
          buildType: 'current'
          downloadType: 'single'
          artifactName: 'drop'
          downloadPath: '$(System.ArtifactsDirectory)'
      - task: TerraformInstaller@0
        displayName: Terraform init
        inputs:
          terraformVersion: 'latest'
      - task: TerraformTaskV3@3
        displayName: Terraform init
        inputs:
          provider: 'azurerm'
          command: 'init'
          backendServiceArm: 'AzureConnection'
          backendAzureRmResourceGroupName: 'Pipelinerg'
          backendAzureRmStorageAccountName: 'pipelinstorage2246'
          backendAzureRmContainerName: 'pipelinecontainer2'
          backendAzureRmKey: 'assignment.tfstate'
      - task: TerraformTaskV3@3
        displayName: Terraform plan
        inputs:
          provider: 'azurerm'
          command: 'plan'
          environmentServiceNameAzureRM: 'AzureConnection'
      - task: TerraformTaskV3@3
        displayName: Terraform apply
        inputs:
          provider: 'azurerm'
          command: 'apply'
          environmentServiceNameAzureRM: 'AzureConnection'